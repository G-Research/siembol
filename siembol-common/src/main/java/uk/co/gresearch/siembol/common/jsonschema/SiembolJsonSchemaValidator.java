package uk.co.gresearch.siembol.common.jsonschema;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.github.fge.jsonschema.core.report.ProcessingReport;
import com.github.fge.jsonschema.main.JsonSchema;
import com.github.fge.jsonschema.main.JsonSchemaFactory;
import com.github.reinert.jjschema.v1.JsonSchemaV4Factory;
import org.apache.commons.lang3.exception.ExceptionUtils;
import uk.co.gresearch.siembol.common.result.SiembolAttributes;
import uk.co.gresearch.siembol.common.result.SiembolResult;

import java.util.List;
import java.util.Optional;

/**
 * An object for json schema validation
 *
 * <p>This interface implements JsonSchemaValidator interface. Validator uses json schema generated by
 * com.github.reinert.jjschema which is enriched by ModelHelper. It adds default values from Dto classes, and
 * it preserves ordering of fields from Dto classes.
 * Moreover, it supports a union type that is implemented as 'OneOf' in the json schema.
 *
 * @author  Marian Novotny
 *
 * @see JsonSchemaValidator
 * @see com.github.reinert.jjschema
 * @see ModelHelper
 *
 */
public class SiembolJsonSchemaValidator implements JsonSchemaValidator {
    private static final String INVALID_INSTANCE_MSG = "Invalid json specification";
    private final String schemaStr;
    private final JsonSchema validationSchema;
    private final ObjectReader jsonReader;

    public SiembolJsonSchemaValidator(Class<?> clazz) throws Exception {
        this(clazz, Optional.empty());
    }

    public SiembolJsonSchemaValidator(Class<?> clazz,
                                      Optional<List<UnionJsonType>> unionTypes) throws Exception {
        com.github.reinert.jjschema.v1.JsonSchemaFactory schemaFactory = new JsonSchemaV4Factory();
        JsonNode configSchema = schemaFactory.createSchema(clazz);

        ModelHelper modelHelper = ModelHelper.createModelHelper(clazz, unionTypes);
        ObjectNode enrichedSchema = modelHelper.getEnrichedSchema(configSchema);

        ObjectMapper mapper = new ObjectMapper();
        Object json = mapper.readValue(enrichedSchema.toString(), Object.class);
        schemaStr = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(json);
        validationSchema = JsonSchemaFactory.byDefault().getJsonSchema(enrichedSchema);
        jsonReader = new ObjectMapper().readerFor(clazz);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SiembolResult getJsonSchema() {
        SiembolAttributes attr = new SiembolAttributes();
        attr.setJsonSchema(schemaStr);
        return new SiembolResult(SiembolResult.StatusCode.OK, attr);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SiembolResult validate(String json) {
        try {
            JsonNode jsonNode = jsonReader.readTree(json);
            ProcessingReport report = this.validationSchema.validate(jsonNode);
            if (!report.isSuccess()) {
                return SiembolResult.fromErrorMessage(report.toString());
            }

            if (!validationSchema.validInstance(jsonNode)) {
                return SiembolResult.fromErrorMessage(INVALID_INSTANCE_MSG);
            }

            return new SiembolResult(SiembolResult.StatusCode.OK, new SiembolAttributes());
        } catch(Exception e){
            return SiembolResult.fromErrorMessage(ExceptionUtils.getStackTrace(e));
        }
    }
}
