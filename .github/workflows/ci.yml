name: CI

on:
  push:
    branches:
      - master

jobs:
  build-java:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-
      - name: Build with Maven
        run: mvn -B package
      - name: Upload alerting-storm jar
        uses: actions/upload-artifact@v2
        with:
          name: alerting-storm
          path: alerting/alerting-storm/target/alerting-storm-*.jar
      - name: Upload enriching-storm jar
        uses: actions/upload-artifact@v2
        with:
          name: enriching-storm
          path: enriching/enriching-storm/target/enriching-storm-*.jar
      - name: Upload parsing-storm jar
        uses: actions/upload-artifact@v2
        with:
          name: parsing-storm
          path: parsing/parsing-storm/target/parsing-storm-*.jar
      - name: Upload config-editor-rest jar
        uses: actions/upload-artifact@v2
        with:
          name: config-editor-rest
          path: config-editor/config-editor-rest/target/config-editor-rest-*.jar
      - name: Upload responding-stream jar
        uses: actions/upload-artifact@v2
        with:
          name: responding-stream
          path: responding/responding-stream/target/responding-stream-*.jar

  build-docker-storm:
    runs-on: ubuntu-latest
    needs: build-java
    strategy:
      matrix:
        component: [alerting-storm, enriching-storm, parsing-storm]
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download jar
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.component }}
          path: deployment/docker
      - name: Get component info
        id: info
        run: |
          [xml]$xml = Get-Content ./*/${{ matrix.component}}/pom.xml
          echo "::set-output name=version::$($xml.project.parent.version)"
          echo "::set-output name=class::$($xml.project.build.plugins.plugin.executions.execution.configuration.transformers.transformer.mainClass)"
        shell: pwsh
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Generate Docker labels
        id: labels
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: gresearchdev/siembol-${{ matrix.component }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: deployment/docker
          file: deployment/docker/Dockerfile.storm
          build-args: |
            JAR=${{ matrix.component }}-${{ steps.info.outputs.version }}.jar
            CLASS=${{ steps.info.outputs.class }}
          pull: true
          push: true
          tags: |
            gresearchdev/siembol-${{ matrix.component }}:latest
            gresearchdev/siembol-${{ matrix.component }}:${{ steps.info.outputs.version }}
          labels: |
            ${{ steps.labels.outputs.labels }}
            org.opencontainers.image.version=${{ steps.info.outputs.version }}
            org.opencontainers.image.title=siembol-${{ matrix.component }}

  build-docker-java:
    runs-on: ubuntu-latest
    needs: build-java
    strategy:
      matrix:
        component: [config-editor-rest, responding-stream]
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download jar
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.component }}
          path: deployment/docker/${{ matrix.component }}
      - name: Copy config defaults
        run: |
          cp config/${{ matrix.component}}/application.properties deployment/docker/${{ matrix.component}}/
          if [ "${{ matrix.component}}" == "config-editor-rest" ]
          then
            mkdir deployment/docker/config-editor-rest/ui-config
            cp config/config-editor-rest/*.json deployment/docker/config-editor-rest/ui-config/
          fi
      - name: Get component info
        id: info
        run: |
          [xml]$xml = Get-Content ./*/${{ matrix.component}}/pom.xml
          echo "::set-output name=version::$($xml.project.parent.version)"
        shell: pwsh
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Generate Docker labels
        id: labels
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: gresearchdev/siembol-${{ matrix.component }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: deployment/docker
          file: deployment/docker/Dockerfile.java
          build-args: |
            APP=${{ matrix.component}}
            VERSION=${{ steps.info.outputs.version }}
          pull: true
          push: true
          tags: |
            gresearchdev/siembol-${{ matrix.component }}:latest
            gresearchdev/siembol-${{ matrix.component }}:${{ steps.info.outputs.version }}
          labels: |
            ${{ steps.labels.outputs.labels }}
            org.opencontainers.image.version=${{ steps.info.outputs.version }}
            org.opencontainers.image.title=siembol-${{ matrix.component }}

  build-js-config-editor-ui:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: config-editor/config-editor-ui
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Cache NPM packages
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-config-editor-ui-${{ hashFiles('config-editor/config-editor-ui/package.json') }}
          restore-keys: |
            npm-config-editor-ui-
      - name: Install NPM packages
        run: |
          npm install typescript@3.7.5
          npm ci
      - name: Testing
        run: npm run test-ci
      - name: Generate build-info.json
        run: |
          jq "{appName: \"Config Editor UI\", appVersion: .version, angularVersion: .dependencies[\"@angular/core\"], buildDate: \"$(date -u +%Y%m%d-%H:%M:%S)\", siembolCompileTimeVersion: .siembolCompileTimeVersion}" package.json > src/assets/build-info.json
      - name: Build
        run: npm run build-prod
      - name: Copy config defaults
        run: cp -r ../../config/config-editor-ui dist/config
      - name: Uploading dist
        uses: actions/upload-artifact@v2
        with:
          name: config-editor-ui
          path: config-editor/config-editor-ui/dist

  build-docker-config-editor-ui:
    runs-on: ubuntu-latest
    needs: build-js-config-editor-ui
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: config-editor-ui
          path: deployment/docker/config-editor-ui
      - name: Get version
        id: info
        run: echo "::set-output name=version::$(jq -r .appVersion deployment/docker/config-editor-ui/assets/build-info.json)"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Generate Docker labels
        id: labels
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: gresearchdev/siembol-config-editor-ui
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: deployment/docker
          file: deployment/docker/Dockerfile.config-editor-ui
          pull: true
          push: true
          tags: |
            gresearchdev/siembol-config-editor-ui:latest
            gresearchdev/siembol-config-editor-ui:${{ steps.info.outputs.version }}
          labels: |
            ${{ steps.labels.outputs.labels }}
            org.opencontainers.image.version=${{ steps.info.outputs.version }}
            org.opencontainers.image.title=siembol-config-editor-ui

  publish-snapshot:
    runs-on: ubuntu-latest
    needs: build-java
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Get snapshot version
        id: version
        run: |
          version=$(grep --max-count=1 "<version>" pom.xml | sed -E "s/.*>(.+)<.*/\1/")
          echo "::set-output name=version::$version"
        shell: bash
      - name: Publish snapshot
        # deploy only SNAPSHOT versions
        if: endsWith(steps.version.outputs.version, '-SNAPSHOT')
        run: mvn --batch-mode deploy
