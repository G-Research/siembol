{
    "config_layout": {
        "$..rules.items": {
            "widget": {
                "formlyConfig": {
                    "type": "tabs"
                }
            }
        },
        "$..rule_description": {
            "widget": {
                "formlyConfig": {
                    "type": "textarea"
                }
            }
        },
        "$..rules.items.properties.matchers": {
            "type": "array",
            "items": {
                "widget": {
                    "formlyConfig": {
                        "wrappers": [
                            "expansion-panel"
                        ]
                    }
                },
                "type": "object",
                "description": "Matcher for matching fields",
                "title": "matcher",
                "properties": {
                    "matcher_type": {
                        "enum": [
                            "REGEX_MATCH",
                            "IS_IN_SET",
                            "CONTAINS",
                            "COMPOSITE_AND",
                            "COMPOSITE_OR"
                        ],
                        "type": "string",
                        "description": "Type of matcher, either Regex match, Contains match, list of strings (newline delimited) or a composite matcher composing several matchers"
                    },
                    "is_negated": {
                        "type": "boolean",
                        "description": "The matcher is negated",
                        "default": false
                    },
                    "field": {
                        "widget": {
                            "formlyConfig": {
                                "hideExpression": "!['CONTAINS','IS_IN_SET', 'REGEX_MATCH'].includes(model.matcher_type)"
                            }
                        },
                        "type": "string",
                        "description": "Field on which the matcher will be evaluated"
                    },
                    "case_insensitive": {
                        "type": "boolean",
                        "description": "Case insensitive string compare",
                        "default": false,
                        "widget": {
                            "formlyConfig": {
                                "hideExpression": "!['CONTAINS', IS_IN_SET'].includes(model.matcher_type)"
                            }
                        }
                    },
                    "starts_with": {
                        "type": "boolean",
                        "description": "The field value starts with the pattern",
                        "default": false,
                        "widget": {
                            "formlyConfig": {
                                "hideExpression": "!['CONTAINS'].includes(model.matcher_type)"
                            }
                        }
                    },
                    "ends_with": {
                        "type": "boolean",
                        "description": "The field value ends with the pattern",
                        "default": false,
                        "widget": {
                            "formlyConfig": {
                                "hideExpression": "!['CONTAINS'].includes(model.matcher_type)"
                            }
                        }
                    },
                    "data": {
                        "type": "string",
                        "description": "Matcher expression as defined by matcher type",
                        "widget": {
                            "formlyConfig": {
                                "type": "textarea",
                                "hideExpression": "!['CONTAINS', 'IS_IN_SET', 'REGEX_MATCH'].includes(model.matcher_type)"
                            }
                        }
                    },
                    "matchers": {
                        "widget": {
                            "formlyConfig": {
                                "hideExpression": "!field.parent.model || !['COMPOSITE_AND', 'COMPOSITE_OR'].includes(field.parent.model.matcher_type)"
                            }
                        },
                        "type": "array",
                        "items": {
                            "widget": {
                                "formlyConfig": {
                                    "wrappers": [
                                        "expansion-panel"
                                    ]
                                }
                            },
                            "type": "object",
                            "description": "Matcher for matching fields",
                            "title": "matcher",
                            "properties": {
                                "matcher_type": {
                                    "enum": [
                                        "REGEX_MATCH",
                                        "IS_IN_SET",
                                        "CONTAINS",
                                        "COMPOSITE_AND",
                                        "COMPOSITE_OR"
                                    ],
                                    "type": "string",
                                    "description": "Type of matcher, either Regex match, Contains match, list of strings (newline delimited) or a composite matcher composing several matchers"
                                },
                                "is_negated": {
                                    "type": "boolean",
                                    "description": "The matcher is negated",
                                    "default": false,
                                    "widget": {
                                        "formlyConfig": {
                                            "hideExpression": "!model"
                                        }
                                    }
                                },
                                "field": {
                                    "widget": {
                                        "formlyConfig": {
                                            "hideExpression": "!model || !['CONTAINS','IS_IN_SET', 'REGEX_MATCH'].includes(model.matcher_type)"
                                        }
                                    },
                                    "type": "string",
                                    "description": "Field on which the matcher will be evaluated"
                                },
                                "case_insensitive": {
                                    "type": "boolean",
                                    "description": "Case insensitive string compare",
                                    "default": false,
                                    "widget": {
                                        "formlyConfig": {
                                            "hideExpression": "!model || !['CONTAINS', IS_IN_SET'].includes(model.matcher_type)"
                                        }
                                    }
                                },
                                "starts_with": {
                                    "type": "boolean",
                                    "description": "The field value starts with the pattern",
                                    "default": false,
                                    "widget": {
                                        "formlyConfig": {
                                            "hideExpression": "!model || !['CONTAINS'].includes(model.matcher_type)"
                                        }
                                    }
                                },
                                "ends_with": {
                                    "type": "boolean",
                                    "description": "The field value ends with the pattern",
                                    "default": false,
                                    "widget": {
                                        "formlyConfig": {
                                            "hideExpression": "!model || !['CONTAINS'].includes(model.matcher_type)"
                                        }
                                    }
                                },
                                "data": {
                                    "type": "string",
                                    "description": "Matcher expression as defined by matcher type",
                                    "widget": {
                                        "formlyConfig": {
                                            "type": "textarea",
                                            "hideExpression": "!model || !['CONTAINS', 'IS_IN_SET', 'REGEX_MATCH'].includes(model.matcher_type)"
                                        }
                                    }
                                },
                                "matchers": {
                                    "widget": {
                                        "formlyConfig": {
                                            "hideExpression": "!field.parent.model || !['COMPOSITE_AND', 'COMPOSITE_OR'].includes(field.parent.model.matcher_type)"
                                        }
                                    },
                                    "type": "array",
                                    "items": {
                                        "widget": {
                                            "formlyConfig": {
                                                "wrappers": [
                                                    "expansion-panel"
                                                ]
                                            }
                                        },
                                        "type": "object",
                                        "description": "Matcher for matching fields",
                                        "title": "matcher",
                                        "properties": {
                                            "matcher_type": {
                                                "enum": [
                                                    "REGEX_MATCH",
                                                    "IS_IN_SET",
                                                    "CONTAINS"
                                                ],
                                                "type": "string",
                                                "description": "Type of matcher, either Regex match, Contains match or list of strings (newline delimited)"
                                            },
                                            "is_negated": {
                                                "type": "boolean",
                                                "description": "The matcher is negated",
                                                "default": false,
                                                "widget": {
                                                    "formlyConfig": {
                                                        "type": "textarea",
                                                        "hideExpression": "!model"
                                                    }
                                                }
                                            },
                                            "field": {
                                                "widget": {
                                                    "formlyConfig": {
                                                        "hideExpression": "!model"
                                                    }
                                                },
                                                "type": "string",
                                                "description": "Field on which the matcher will be evaluated"
                                            },
                                            "case_insensitive": {
                                                "type": "boolean",
                                                "description": "Case insensitive string compare",
                                                "default": false,
                                                "widget": {
                                                    "formlyConfig": {
                                                        "hideExpression": "!model || !['CONTAINS', IS_IN_SET'].includes(model.matcher_type)"
                                                    }
                                                }
                                            },
                                            "starts_with": {
                                                "type": "boolean",
                                                "description": "The field value starts with the pattern",
                                                "default": false,
                                                "widget": {
                                                    "formlyConfig": {
                                                        "hideExpression": "!model || !['CONTAINS'].includes(model.matcher_type)"
                                                    }
                                                }
                                            },
                                            "ends_with": {
                                                "type": "boolean",
                                                "description": "The field value ends with the pattern",
                                                "default": false,
                                                "widget": {
                                                    "formlyConfig": {
                                                        "hideExpression": "!model || !['CONTAINS'].includes(model.matcher_type)"
                                                    }
                                                }
                                            },
                                            "data": {
                                                "type": "string",
                                                "description": "Matcher expression as defined by matcher type",
                                                "widget": {
                                                    "formlyConfig": {
                                                        "type": "textarea",
                                                        "hideExpression": "!model"
                                                    }
                                                }
                                            }
                                        },
                                        "required": [
                                            "matcher_type"
                                        ]
                                    }
                                },
                                "required": [
                                    "matcher_type"
                                ]
                            }
                        },
                        "required": [
                            "matcher_type"
                        ]
                    },
                    "description": "Matchers of the rule",
                    "minItems": 1
                }
            }
        },
        "$..rules..tags.items": {
            "widget": {
                "formlyConfig": {
                    "wrappers": [
                        "panel"
                    ]
                }
            }
        },
        "$..rules..rule_protection": {
            "widget": {
                "optional": true
            }
        },
        "$.properties.tags.items": {
            "widget": {
                "formlyConfig": {
                    "wrappers": [
                        "panel"
                    ]
                }
            }
        }
    },
    "admin_config_layout": {
        "$": {
            "widget": {
                "formlyConfig": {
                    "type": "admin-tabs"
                }
            }
        },
        "$..['alerts.input.topics']": {
            "widget": {
                "formlyConfig": {
                    "wrappers": [
                        "expansion-panel"
                    ],
                    "templateOptions": {
                        "genericSettingTab": "true"
                    }
                }
            }
        },
        "$..['alerts.engine.clean.interval.sec']": {
            "widget": {
                "formlyConfig": {
                    "hideExpression": "true"
                }
            }
        },
        "$..['alerts.engine']": {
            "enum": [
                "siembol_alerts"
            ]
        },
        "$..['kafka.spout.properties']": {
            "widget": {
                "formlyConfig": {
                    "wrappers": [
                        "help-link"
                    ],
                    "templateOptions": {
                        "link": "https://kafka.apache.org/0102/documentation.html#consumerconfigs"
                    }
                }
            }
        },
        "$..['offset.commit.period.ms']": {
            "widget": {
                "formlyConfig": {
                    "wrappers": [
                        "form-field",
                        "help-link"
                    ],
                    "templateOptions": {
                        "link": "https://docs.cloudera.com/HDPDocuments/HDP3/HDP-3.1.5/storm-moving-data/content/tuning_kafkaspout_performance.html"
                    }
                }
            }
        },
        "$..['max.uncommitted.offsets']": {
            "widget": {
                "formlyConfig": {
                    "wrappers": [
                        "form-field",
                        "help-link"
                    ],
                    "templateOptions": {
                        "link": "https://docs.cloudera.com/HDPDocuments/HDP3/HDP-3.1.5/storm-moving-data/content/tuning_kafkaspout_performance.html"
                    }
                }
            }
        },
        "$..['storm.config']": {
            "widget": {
                "formlyConfig": {
                    "wrappers": [
                        "help-link"
                    ],
                    "templateOptions": {
                        "link": "https://storm.apache.org/releases/current/Configuration.html"
                    }
                }
            }
        },
        "$..['kafka.producer.properties']": {
            "widget": {
                "formlyConfig": {
                    "wrappers": [
                        "help-link"
                    ],
                    "templateOptions": {
                        "link": "https://kafka.apache.org/0102/documentation.html#producerconfigs"
                    }
                }
            }
        },
        "$..['zk.path']": {
            "widget": {
                "formlyConfig": {
                    "type": "textarea"
                }
            }
        }
    },
    "importers_layout": {
        "$..tags.items": {
            "widget": {
                "formlyConfig": {
                    "wrappers": [
                        "panel"
                    ]
                }
            }
        },
        "$..field_mapping.items": {
            "widget": {
                "formlyConfig": {
                    "wrappers": [
                        "panel"
                    ]
                }
            }
        }
    }
}